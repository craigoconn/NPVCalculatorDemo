@using NPVCalculator.Client.Interfaces
@using NPVCalculator.Shared.Models
@using NPVCalculator.Client.Services
@using NPVCalculator.Client.Models
@using NPVCalculator.Client.Components
@page "/"
@page "/calculate"
@inject INpvCalculationService CalculationService
@inject IChartService ChartService

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <NpvInputForm Model="@model"
                          OnCalculate="@HandleCalculate"
                          IsCalculating="@isCalculating"
                          Errors="@errors" />
        </div>
        <div class="col-md-6">
            <NpvResults Results="@results" />
        </div>
    </div>

    @if (HasResults())
    {
        <div class="row mt-4">
            <div class="col-12">
                <NpvChart Results="@results" />
            </div>
        </div>
    }
</div>

@code {
    private NpvInputModel model = new();
    private List<NpvResult>? results;
    private List<string> errors = [];
    private bool isCalculating = false;

    private bool HasResults() => results?.Any() == true;

    private async Task HandleCalculate(NpvInputModel inputModel)
    {
        SetCalculatingState(true);
        ClearErrors();
        results = null;

        try
        {
            var result = await CalculationService.ProcessCalculationAsync(inputModel);

            if (result.IsSuccess && result.Results != null)
            {
                results = result.Results;
            }
            else
            {
                errors.AddRange(result.Errors);
            }
        }
        catch (Exception ex)
        {
            errors.Add($"Error: {ex.Message}");
        }
        finally
        {
            SetCalculatingState(false);
        }
    }

    private void SetCalculatingState(bool calculating)
    {
        isCalculating = calculating;
        StateHasChanged();
    }

    private void ClearErrors()
    {
        errors.Clear();
    }
}